!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARGS_CHECK	thread_all.h	32;"	d
BIGFILESIZE	factory.h	9;"	d
BUFSIZE	factory.h	11;"	d
CC	Makefile	/^CC:=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS:=-Wall $/;"	m
DEBUG_SERVER	factory.h	7;"	d
ELF	Makefile	/^ELF:=server$/;"	m
ERROR_CHECK	thread_all.h	33;"	d
Factory_t	factory.h	/^}Factory_t, *pFactory_t;$/;"	t	typeref:struct:__anon1
Node_t	work_que.h	/^}Node_t, *pNode_t;$/;"	t	typeref:struct:tag_node
OBJS	Makefile	/^OBJS:=$(patsubst %.c,%.o,$(SRCS))$/;"	m
Que_t	work_que.h	/^}Que_t, *pQue_t;$/;"	t	typeref:struct:__anon2
SRCS	Makefile	/^SRCS:=$(wildcard *.c)$/;"	m
THREAD_ERROR_CHECK	thread_all.h	34;"	d
_GNU_SOURCE	thread_all.h	2;"	d
__FACTORY_H__	factory.h	2;"	d
aioRead	aio.c	/^int aioRead(int fromFd, char* buf, size_t length){$/;"	f
aioWr	aio.c	/^int aioWr(int toFd, char* buf, size_t length){$/;"	f
buf	factory.h	/^    char buf[512];\/\/文件名，文件大小，接收目录$/;"	m	struct:linkMsg
capacity	work_que.h	/^    int capacity;$/;"	m	struct:__anon2
cond	factory.h	/^    pthread_cond_t cond;$/;"	m	struct:__anon1
epollAdd	main.c	/^int epollAdd(int epfd, int fd){$/;"	f
exitFds	main.c	/^int exitFds[2];$/;"	v
exitHandler	main.c	/^void exitHandler(int signum){$/;"	f
factoryDestroy	factory.c	/^void factoryDestroy(pFactory_t pf){$/;"	f
factoryInit	factory.c	/^int factoryInit(pFactory_t pf,int threadNum,int capacity){$/;"	f
factoryStart	factory.c	/^int factoryStart(pFactory_t pf){$/;"	f
fileSize	factory.h	/^    size_t fileSize;$/;"	m	struct:linkMsg
flag	factory.h	/^    int flag;\/\/标志位 读写浏览$/;"	m	struct:linkMsg
linkMsg	factory.h	/^typedef struct linkMsg{$/;"	s
linkMsg_t	factory.h	/^}linkMsg_t;$/;"	t	typeref:struct:linkMsg
main	main.c	/^int main(int argc, char* argv[])$/;"	f
mutex	work_que.h	/^    pthread_mutex_t mutex;$/;"	m	struct:__anon2
newFd	work_que.h	/^    int newFd;$/;"	m	struct:tag_node
pFactory_t	factory.h	/^}Factory_t, *pFactory_t;$/;"	t	typeref:struct:__anon1
pNext	work_que.h	/^    struct tag_node *pNext;$/;"	m	struct:tag_node	typeref:struct:tag_node::tag_node
pNode_t	work_que.h	/^}Node_t, *pNode_t;$/;"	t	typeref:struct:tag_node
pQue_t	work_que.h	/^}Que_t, *pQue_t;$/;"	t	typeref:struct:__anon2
pthid	factory.h	/^    pthread_t *pthid;$/;"	m	struct:__anon1
que	factory.h	/^    Que_t que;$/;"	m	struct:__anon1
queDestroy	work_que.c	/^void queDestroy(pQue_t pq){$/;"	f
queGet	work_que.c	/^int queGet(pQue_t pq, pNode_t *p){$/;"	f
queHead	work_que.h	/^    pNode_t queHead, queTail;$/;"	m	struct:__anon2
queInit	work_que.c	/^void queInit(pQue_t pq, int capacity){$/;"	f
queInsert	work_que.c	/^void queInsert(pQue_t pq, pNode_t pNew){$/;"	f
queTail	work_que.h	/^    pNode_t queHead, queTail;$/;"	m	struct:__anon2
recvCycle	transmission.c	/^int recvCycle(int sfd, void* buf, long fileSize){$/;"	f
recvFile	transmission.c	/^int recvFile(int sfd, linkMsg_t* plmsg){$/;"	f
size	factory.h	/^    int size;$/;"	m	struct:linkMsg
size	work_que.h	/^    int size;$/;"	m	struct:__anon2
startFlag	factory.h	/^    int startFlag;$/;"	m	struct:__anon1
tag_node	work_que.h	/^typedef struct tag_node{$/;"	s
tcpInit	tcpInit.c	/^int tcpInit(char* ip, char* port){$/;"	f
threadExitFunc	factory.c	/^void threadExitFunc(void *p){$/;"	f
threadFun	factory.c	/^void* threadFun(void *p){$/;"	f
threadNum	factory.h	/^    int threadNum;$/;"	m	struct:__anon1
transmiss	transmission.c	/^int transmiss(int tranFd, linkMsg_t *plmsg){$/;"	f
